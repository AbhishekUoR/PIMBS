Starting redis #0 at port 30000
Starting redis #1 at port 30001
Starting redis #2 at port 30002
Starting redis #3 at port 30003
Starting redis #4 at port 30004
Starting redis #5 at port 30005
Starting redis #6 at port 30006
Starting redis #7 at port 30007
Starting redis #8 at port 30008
Starting redis #9 at port 30009
Starting redis #10 at port 30010
Starting redis #11 at port 30011
Starting redis #12 at port 30012
Starting redis #13 at port 30013
Starting redis #14 at port 30014
Starting redis #15 at port 30015
Starting redis #16 at port 30016
Starting redis #17 at port 30017
Starting redis #18 at port 30018
Starting redis #19 at port 30019
Testing unit: 00-base.tcl
17:43:13> (init) Restart killed instances: OK
17:43:13> Cluster nodes are reachable: OK
17:43:13> Cluster nodes hard reset: OK
17:43:15> Cluster Join and auto-discovery test: OK
17:43:18> Before slots allocation, all nodes report cluster failure: OK
17:43:18> Different nodes have different IDs: OK
17:43:18> It is possible to perform slot allocation: OK
17:43:19> After the join, every node gets a different config epoch: .OK
17:43:21> Nodes should report cluster_state is ok now: OK
17:43:22> It is possible to write and read from the cluster: OK
Testing unit: 01-faildet.tcl
17:43:22> (init) Restart killed instances: OK
17:43:22> Cluster nodes are reachable: OK
17:43:22> Cluster nodes hard reset: OK
17:43:24> Cluster Join and auto-discovery test: OK
17:43:28> Before slots allocation, all nodes report cluster failure: OK
17:43:28> Create a 5 nodes cluster: OK
17:43:32> Cluster should start ok: OK
17:43:32> Killing two slave nodes: OK
17:43:32> Cluster should be still up: OK
17:43:32> Killing one master node: OK
17:43:32> Cluster should be down now: OK
17:43:35> Restarting master node: OK
17:43:36> Cluster should be up again: OK
Testing unit: 02-failover.tcl
17:43:43> (init) Restart killed instances: redis/5 redis/6 OK
17:43:43> Cluster nodes are reachable: OK
17:43:43> Cluster nodes hard reset: OK
17:43:46> Cluster Join and auto-discovery test: OK
17:43:50> Before slots allocation, all nodes report cluster failure: OK
17:43:50> Create a 5 nodes cluster: OK
17:43:54> Cluster is up: OK
17:43:54> Cluster is writable: OK
17:43:54> Instance #5 is a slave: OK
17:43:54> Instance #5 synced with the master: OK
17:43:54> Killing one master node: OK
17:43:55> Wait for failover: OK
17:43:59> Cluster should eventually be up again: OK
17:43:59> Cluster is writable: OK
17:43:59> Instance #5 is now a master: OK
17:43:59> Restarting the previously killed master node: OK
17:43:59> Instance #0 gets converted into a slave: OK
Testing unit: 03-failover-loop.tcl
17:43:59> (init) Restart killed instances: OK
17:43:59> Cluster nodes are reachable: OK
17:43:59> Cluster nodes hard reset: OK
17:44:01> Cluster Join and auto-discovery test: OK
17:44:04> Before slots allocation, all nodes report cluster failure: OK
17:44:04> Create a 5 nodes cluster: OK
17:44:08> Cluster is up: OK
--- Iteration 19 ---
17:44:08> Cluster is writable before failover: OK
17:44:08> Killing node #5: OK
17:44:09> Cluster should eventually be up again: OK
17:44:09> Cluster is writable again: OK
17:44:09> Restarting node #5: OK
17:44:09> Instance #5 is now a slave: OK
17:44:09> We can read back the value we set before: OK
--- Iteration 18 ---
17:44:09> Cluster is writable before failover: OK
17:44:09> Killing node #6: OK
17:44:09> Cluster should eventually be up again: OK
17:44:09> Cluster is writable again: OK
17:44:09> Restarting node #6: OK
17:44:09> Instance #6 is now a slave: OK
17:44:09> We can read back the value we set before: OK
--- Iteration 17 ---
17:44:10> Wait for slave of #2 to sync: OK
17:44:10> Cluster is writable before failover: OK
17:44:10> Killing node #2: OK
17:44:10> Wait failover by #7 with old epoch 3: OK
17:44:14> Cluster should eventually be up again: OK
17:44:14> Cluster is writable again: OK
17:44:14> Restarting node #2: OK
17:44:14> Instance #2 is now a slave: OK
17:44:14> We can read back the value we set before: OK
--- Iteration 16 ---
17:44:15> Wait for slave of #7 to sync: OK
17:44:16> Cluster is writable before failover: OK
17:44:16> Killing node #7: OK
17:44:17> Wait failover by #2 with old epoch 21: OK
17:44:20> Cluster should eventually be up again: OK
17:44:20> Cluster is writable again: OK
17:44:20> Restarting node #7: OK
17:44:20> Instance #7 is now a slave: OK
17:44:21> We can read back the value we set before: OK
--- Iteration 15 ---
17:44:21> Cluster is writable before failover: OK
17:44:21> Killing node #7: OK
17:44:21> Cluster should eventually be up again: OK
17:44:21> Cluster is writable again: OK
17:44:21> Restarting node #7: OK
17:44:21> Instance #7 is now a slave: OK
17:44:21> We can read back the value we set before: OK
--- Iteration 14 ---
17:44:21> Wait for slave of #1 to sync: OK
17:44:21> Cluster is writable before failover: OK
17:44:21> Killing node #1: OK
17:44:21> Wait failover by #6 with old epoch 2: OK
17:44:26> Cluster should eventually be up again: OK
17:44:26> Cluster is writable again: OK
17:44:26> Restarting node #1: OK
17:44:26> Instance #1 is now a slave: OK
17:44:26> We can read back the value we set before: OK
--- Iteration 13 ---
17:44:26> Cluster is writable before failover: OK
17:44:26> Killing node #5: OK
17:44:26> Cluster should eventually be up again: OK
17:44:26> Cluster is writable again: OK
17:44:26> Restarting node #5: OK
17:44:26> Instance #5 is now a slave: OK
17:44:26> We can read back the value we set before: OK
--- Iteration 12 ---
17:44:27> Cluster is writable before failover: OK
17:44:27> Killing node #5: OK
17:44:27> Cluster should eventually be up again: OK
17:44:27> Cluster is writable again: OK
17:44:27> Restarting node #5: OK
17:44:27> Instance #5 is now a slave: OK
17:44:27> We can read back the value we set before: OK
--- Iteration 11 ---
17:44:27> Cluster is writable before failover: OK
17:44:27> Killing node #5: OK
17:44:27> Cluster should eventually be up again: OK
17:44:27> Cluster is writable again: OK
17:44:27> Restarting node #5: OK
17:44:27> Instance #5 is now a slave: OK
17:44:27> We can read back the value we set before: OK
--- Iteration 10 ---
17:44:27> Wait for slave of #6 to sync: OK
17:44:27> Cluster is writable before failover: OK
17:44:27> Killing node #6: OK
17:44:27> Wait failover by #1 with old epoch 23: OK
17:44:31> Cluster should eventually be up again: OK
17:44:32> Cluster is writable again: OK
17:44:32> Restarting node #6: OK
17:44:32> Instance #6 is now a slave: OK
17:44:32> We can read back the value we set before: OK
--- Iteration 9 ---
17:44:32> Cluster is writable before failover: OK
17:44:32> Killing node #8: OK
17:44:32> Cluster should eventually be up again: OK
17:44:32> Cluster is writable again: OK
17:44:32> Restarting node #8: OK
17:44:32> Instance #8 is now a slave: OK
17:44:32> We can read back the value we set before: OK
--- Iteration 8 ---
17:44:32> Cluster is writable before failover: OK
17:44:32> Killing node #8: OK
17:44:32> Cluster should eventually be up again: OK
17:44:32> Cluster is writable again: OK
17:44:32> Restarting node #8: OK
17:44:33> Instance #8 is now a slave: OK
17:44:33> We can read back the value we set before: OK
--- Iteration 7 ---
17:44:33> Cluster is writable before failover: OK
17:44:33> Killing node #7: OK
17:44:34> Cluster should eventually be up again: OK
17:44:34> Cluster is writable again: OK
17:44:34> Restarting node #7: OK
17:44:34> Instance #7 is now a slave: OK
17:44:34> We can read back the value we set before: OK
--- Iteration 6 ---
17:44:34> Cluster is writable before failover: OK
17:44:34> Killing node #9: OK
17:44:34> Cluster should eventually be up again: OK
17:44:34> Cluster is writable again: OK
17:44:34> Restarting node #9: OK
17:44:34> Instance #9 is now a slave: OK
17:44:34> We can read back the value we set before: OK
--- Iteration 5 ---
17:44:34> Cluster is writable before failover: OK
17:44:34> Killing node #7: OK
17:44:34> Cluster should eventually be up again: OK
17:44:34> Cluster is writable again: OK
17:44:34> Restarting node #7: OK
17:44:35> Instance #7 is now a slave: OK
17:44:35> We can read back the value we set before: OK
--- Iteration 4 ---
17:44:35> Wait for slave of #1 to sync: OK
17:44:35> Cluster is writable before failover: OK
17:44:35> Killing node #1: OK
17:44:36> Wait failover by #6 with old epoch 24: OK
17:44:39> Cluster should eventually be up again: OK
17:44:39> Cluster is writable again: OK
17:44:39> Restarting node #1: OK
17:44:40> Instance #1 is now a slave: OK
17:44:40> We can read back the value we set before: OK
--- Iteration 3 ---
17:44:40> Cluster is writable before failover: OK
17:44:40> Killing node #8: OK
17:44:41> Cluster should eventually be up again: OK
17:44:41> Cluster is writable again: OK
17:44:41> Restarting node #8: OK
17:44:41> Instance #8 is now a slave: OK
17:44:41> We can read back the value we set before: OK
--- Iteration 2 ---
17:44:41> Wait for slave of #4 to sync: OK
17:44:41> Cluster is writable before failover: OK
17:44:41> Killing node #4: OK
17:44:41> Wait failover by #9 with old epoch 5: OK
17:44:46> Cluster should eventually be up again: OK
17:44:46> Cluster is writable again: OK
17:44:46> Restarting node #4: OK
17:44:46> Instance #4 is now a slave: OK
17:44:46> We can read back the value we set before: OK
--- Iteration 1 ---
17:44:46> Wait for slave of #0 to sync: OK
17:44:46> Cluster is writable before failover: OK
17:44:46> Killing node #0: OK
17:44:47> Wait failover by #5 with old epoch 1: OK
17:44:51> Cluster should eventually be up again: OK
17:44:51> Cluster is writable again: OK
17:44:51> Restarting node #0: OK
17:44:51> Instance #0 is now a slave: OK
17:44:51> We can read back the value we set before: OK
17:44:52> Post condition: current_epoch >= my_epoch everywhere: OK
Testing unit: 04-resharding.tcl
17:44:52> (init) Restart killed instances: OK
17:44:52> Cluster nodes are reachable: OK
17:44:52> Cluster nodes hard reset: OK
17:44:54> Cluster Join and auto-discovery test: OK
17:44:57> Before slots allocation, all nodes report cluster failure: OK
17:44:57> Create a 5 nodes cluster: OK
17:45:01> Cluster is up: OK
17:45:01> Cluster consistency during live resharding: WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW...Starting reshardingtarting resharding
17:45:52> Verify 50000 keys for consistency with logical content: OK
Testing unit: 05-slave-selection.tcl
17:45:58> (init) Restart killed instances: OK
17:45:58> Cluster nodes are reachable: OK
17:45:58> Cluster nodes hard reset: OK
17:46:00> Cluster Join and auto-discovery test: OK
17:46:03> Before slots allocation, all nodes report cluster failure: OK
17:46:03> Create a 5 nodes cluster: OK
17:46:07> Cluster is up: OK
17:46:07> The first master has actually two slaves: OK
17:46:07> Slaves of #0 are instance #5 and #10 as expected: OK
17:46:07> Instance #5 and #10 synced with the master: OK
17:46:07> Slaves are both able to receive and acknowledge writes: OK
17:46:07> Write data while slave #10 is paused and can't receive it: OK
17:46:17> Wait for instance #5 (and not #10) to turn into a master: OK
17:46:22> Wait for the node #10 to return alive before ending the test: OK
17:46:22> Cluster should eventually be up again: OK
17:46:22> Node #10 should eventually replicate node #5: OK
Testing unit: 06-slave-stop-cond.tcl
17:46:22> (init) Restart killed instances: redis/0 OK
17:46:22> Cluster nodes are reachable: OK
17:46:23> Cluster nodes hard reset: OK
17:46:25> Cluster Join and auto-discovery test: OK
17:46:28> Before slots allocation, all nodes report cluster failure: OK
17:46:28> Create a 5 nodes cluster: OK
17:46:32> Cluster is up: OK
17:46:32> The first master has actually one slave: OK
17:46:32> Slaves of #0 is instance #5 as expected: OK
17:46:32> Instance #5 synced with the master: OK
17:46:32> Lower the slave validity factor of #5 to the value of 2: OK
17:46:32> Break master-slave link and prevent further reconnections: OK
17:46:52> Slave #5 is reachable and alive: OK
17:46:52> Slave #5 should not be able to failover: OK
17:47:02> Cluster should be down: OK
Testing unit: 07-replica-migration.tcl
17:47:02> (init) Restart killed instances: redis/0 OK
17:47:03> Cluster nodes are reachable: OK
17:47:03> Cluster nodes hard reset: OK
17:47:05> Cluster Join and auto-discovery test: OK
17:47:09> Before slots allocation, all nodes report cluster failure: OK
17:47:09> Create a 5 nodes cluster: OK
17:47:13> Cluster is up: OK
17:47:13> Each master should have two replicas attached: OK
17:47:13> Killing all the slaves of master #0 and #1: OK
17:47:18> Master #0 should have at least one replica: OK
17:47:18> Master #1 should have at least one replica: OK
17:47:18> Master #2 should have at least one replica: OK
17:47:18> Master #3 should have at least one replica: OK
17:47:18> Master #4 should have at least one replica: OK
Testing unit: 08-update-msg.tcl
17:47:18> (init) Restart killed instances: redis/5 redis/6 redis/10 redis/11 OK
17:47:19> Cluster nodes are reachable: OK
17:47:19> Cluster nodes hard reset: OK
17:47:21> Cluster Join and auto-discovery test: OK
17:47:25> Before slots allocation, all nodes report cluster failure: OK
17:47:25> Create a 5 nodes cluster: OK
17:47:29> Cluster is up: OK
17:47:29> Cluster is writable: OK
17:47:30> Instance #5 is a slave: OK
17:47:30> Instance #5 synced with the master: OK
17:47:30> Killing one master node: OK
17:47:31> Wait for failover: OK
17:47:34> Cluster should eventually be up again: OK
17:47:34> Cluster is writable: OK
17:47:34> Instance #5 is now a master: OK
17:47:34> Killing the new master #5: OK
17:47:35> Cluster should be down now: OK
17:47:37> Restarting the old master node: OK
17:47:37> Instance #0 gets converted into a slave: OK
17:47:38> Restarting the new master node: OK
17:47:38> Cluster is up again: OK
Testing unit: 09-pubsub.tcl
17:47:44> (init) Restart killed instances: OK
17:47:44> Cluster nodes are reachable: OK
17:47:44> Cluster nodes hard reset: OK
17:47:47> Cluster Join and auto-discovery test: OK
17:47:51> Before slots allocation, all nodes report cluster failure: OK
17:47:51> Create a 5 nodes cluster: OK
17:47:55> Test publishing to master: OK
17:47:55> Test publishing to slave: OK
Testing unit: 10-manual-failover.tcl
17:47:55> (init) Restart killed instances: OK
17:47:55> Cluster nodes are reachable: OK
17:47:55> Cluster nodes hard reset: OK
17:47:57> Cluster Join and auto-discovery test: OK
17:48:01> Before slots allocation, all nodes report cluster failure: OK
17:48:01> Create a 5 nodes cluster: OK
17:48:05> Cluster is up: OK
17:48:05> Cluster is writable: OK
17:48:05> Instance #5 is a slave: OK
17:48:05> Instance #5 synced with the master: OK
17:48:06> Send CLUSTER FAILOVER to #5, during load: WWWWWWWWWWOK
17:48:08> Wait for failover: OK
17:48:08> Cluster should eventually be up again: OK
17:48:08> Cluster is writable: OK
17:48:08> Instance #5 is now a master: OK
17:48:08> Verify 50000 keys for consistency with logical content: OK
17:48:09> Instance #0 gets converted into a slave: OK
17:48:09> (init) Restart killed instances: OK
17:48:09> Cluster nodes are reachable: OK
17:48:09> Cluster nodes hard reset: OK
17:48:12> Cluster Join and auto-discovery test: OK
17:48:16> Before slots allocation, all nodes report cluster failure: OK
17:48:16> Create a 5 nodes cluster: OK
17:48:20> Cluster is up: OK
17:48:20> Cluster is writable: OK
17:48:20> Instance #5 is a slave: OK
17:48:20> Instance #5 synced with the master: OK
17:48:20> Make instance #0 unreachable without killing it: OK
17:48:20> Send CLUSTER FAILOVER to instance #5: OK
17:48:20> Instance #5 is still a slave after some time (no failover): OK
17:48:25> Wait for instance #0 to return back alive: OK
17:48:30> (init) Restart killed instances: OK
17:48:30> Cluster nodes are reachable: OK
17:48:30> Cluster nodes hard reset: OK
17:48:32> Cluster Join and auto-discovery test: OK
17:48:36> Before slots allocation, all nodes report cluster failure: OK
17:48:36> Create a 5 nodes cluster: OK
17:48:40> Cluster is up: OK
17:48:40> Cluster is writable: OK
17:48:41> Instance #5 is a slave: OK
17:48:41> Instance #5 synced with the master: OK
17:48:41> Make instance #0 unreachable without killing it: OK
17:48:41> Send CLUSTER FAILOVER to instance #5: OK
17:48:41> Instance #5 is a master after some time: OK
17:48:41> Wait for instance #0 to return back alive: OK
Testing unit: 11-manual-takeover.tcl
17:48:51> (init) Restart killed instances: OK
17:48:51> Cluster nodes are reachable: OK
17:48:51> Cluster nodes hard reset: OK
17:48:53> Cluster Join and auto-discovery test: OK
17:48:56> Before slots allocation, all nodes report cluster failure: OK
17:48:57> Create a 5 nodes cluster: OK
17:49:01> Cluster is up: OK
17:49:01> Cluster is writable: OK
17:49:01> Killing majority of master nodes: OK
17:49:03> Cluster should eventually be down: OK
17:49:04> Use takeover to bring slaves back: OK
17:49:05> Cluster should eventually be up again: OK
17:49:06> Cluster is writable: OK
17:49:06> Instance #5, #6, #7 are now masters: OK
17:49:06> Restarting the previously killed master nodes: OK
17:49:07> Instance #0, #1, #2 gets converted into a slaves: OK
Cleaning up...
GOOD! No errors.

Collection and Platform Info
----------------------------
Parameter                 r017cc                                                                                                        
------------------------  --------------------------------------------------------------------------------------------------------------
Application Command Line  /home/ziyang/Pmem/redis-3.0.1/runtest-cluster                                                                 
Operating System          3.11.0 DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=12.04
DISTRIB_CODENAME=precise
DISTRIB_DESCRIPTION="Ubuntu 12.04 LTS"
Computer Name             ziyang-OptiPlex-7020                                                                                          
Result Size               171596064                                                                                                     
Collection start time     00:43:08 22/05/2015 UTC                                                                                       
Collection stop time      00:49:11 22/05/2015 UTC                                                                                       

CPU
---
Parameter          r017cc                                           
-----------------  -------------------------------------------------
Name               4th generation Intel(R) Core(TM) Processor family
Frequency          3292359000                                       
Logical CPU Count  4                                                

GPU
---
Parameter  r017cc
---------  ------

GPU OpenCL Info
---------------
Parameter  r017cc
---------  ------

Summary
-------
Average Concurrency:  0.199   
Elapsed Time:         362.222 
CPU Time:             40.920  
Wait Time:            1141.926

GPU Usage
---------
