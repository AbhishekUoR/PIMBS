Starting redis #0 at port 30000
Starting redis #1 at port 30001
Starting redis #2 at port 30002
Starting redis #3 at port 30003
Starting redis #4 at port 30004
Starting redis #5 at port 30005
Starting redis #6 at port 30006
Starting redis #7 at port 30007
Starting redis #8 at port 30008
Starting redis #9 at port 30009
Starting redis #10 at port 30010
Starting redis #11 at port 30011
Starting redis #12 at port 30012
Starting redis #13 at port 30013
Starting redis #14 at port 30014
Starting redis #15 at port 30015
Starting redis #16 at port 30016
Starting redis #17 at port 30017
Starting redis #18 at port 30018
Starting redis #19 at port 30019
Testing unit: 00-base.tcl
17:34:05> (init) Restart killed instances: OK
17:34:05> Cluster nodes are reachable: OK
17:34:05> Cluster nodes hard reset: OK
17:34:06> Cluster Join and auto-discovery test: OK
17:34:11> Before slots allocation, all nodes report cluster failure: OK
17:34:11> Different nodes have different IDs: OK
17:34:11> It is possible to perform slot allocation: OK
17:34:11> After the join, every node gets a different config epoch: OK
17:34:13> Nodes should report cluster_state is ok now: OK
17:34:15> It is possible to write and read from the cluster: OK
Testing unit: 01-faildet.tcl
17:34:15> (init) Restart killed instances: OK
17:34:15> Cluster nodes are reachable: OK
17:34:15> Cluster nodes hard reset: OK
17:34:17> Cluster Join and auto-discovery test: OK
17:34:21> Before slots allocation, all nodes report cluster failure: OK
17:34:21> Create a 5 nodes cluster: OK
17:34:24> Cluster should start ok: OK
17:34:24> Killing two slave nodes: OK
17:34:26> Cluster should be still up: OK
17:34:26> Killing one master node: OK
17:34:27> Cluster should be down now: OK
17:34:29> Restarting master node: OK
17:34:29> Cluster should be up again: OK
Testing unit: 02-failover.tcl
17:34:37> (init) Restart killed instances: redis/5 redis/6 OK
17:34:37> Cluster nodes are reachable: OK
17:34:37> Cluster nodes hard reset: OK
17:34:39> Cluster Join and auto-discovery test: OK
17:34:43> Before slots allocation, all nodes report cluster failure: OK
17:34:43> Create a 5 nodes cluster: OK
17:34:47> Cluster is up: OK
17:34:47> Cluster is writable: OK
17:34:47> Instance #5 is a slave: OK
17:34:47> Instance #5 synced with the master: OK
17:34:47> Killing one master node: OK
17:34:48> Wait for failover: OK
17:34:51> Cluster should eventually be up again: OK
17:34:51> Cluster is writable: OK
17:34:51> Instance #5 is now a master: OK
17:34:51> Restarting the previously killed master node: OK
17:34:52> Instance #0 gets converted into a slave: OK
Testing unit: 03-failover-loop.tcl
17:34:52> (init) Restart killed instances: OK
17:34:52> Cluster nodes are reachable: OK
17:34:52> Cluster nodes hard reset: OK
17:34:53> Cluster Join and auto-discovery test: OK
17:34:57> Before slots allocation, all nodes report cluster failure: OK
17:34:57> Create a 5 nodes cluster: OK
17:35:02> Cluster is up: OK
--- Iteration 19 ---
17:35:02> Cluster is writable before failover: OK
17:35:02> Killing node #9: OK
17:35:03> Cluster should eventually be up again: OK
17:35:03> Cluster is writable again: OK
17:35:03> Restarting node #9: OK
17:35:03> Instance #9 is now a slave: OK
17:35:03> We can read back the value we set before: OK
--- Iteration 18 ---
17:35:03> Wait for slave of #3 to sync: OK
17:35:03> Cluster is writable before failover: OK
17:35:03> Killing node #3: OK
17:35:04> Wait failover by #8 with old epoch 4: OK
17:35:07> Cluster should eventually be up again: OK
17:35:07> Cluster is writable again: OK
17:35:07> Restarting node #3: OK
17:35:07> Instance #3 is now a slave: OK
17:35:08> We can read back the value we set before: OK
--- Iteration 17 ---
17:35:08> Wait for slave of #8 to sync: OK
17:35:09> Cluster is writable before failover: OK
17:35:09> Killing node #8: OK
17:35:10> Wait failover by #3 with old epoch 21: OK
17:35:13> Cluster should eventually be up again: OK
17:35:13> Cluster is writable again: OK
17:35:13> Restarting node #8: OK
17:35:13> Instance #8 is now a slave: OK
17:35:13> We can read back the value we set before: OK
--- Iteration 16 ---
17:35:14> Cluster is writable before failover: OK
17:35:14> Killing node #9: OK
17:35:15> Cluster should eventually be up again: OK
17:35:15> Cluster is writable again: OK
17:35:15> Restarting node #9: OK
17:35:15> Instance #9 is now a slave: OK
17:35:15> We can read back the value we set before: OK
--- Iteration 15 ---
17:35:15> Cluster is writable before failover: OK
17:35:15> Killing node #5: OK
17:35:16> Cluster should eventually be up again: OK
17:35:16> Cluster is writable again: OK
17:35:16> Restarting node #5: OK
17:35:16> Instance #5 is now a slave: OK
17:35:16> We can read back the value we set before: OK
--- Iteration 14 ---
17:35:16> Wait for slave of #2 to sync: OK
17:35:16> Cluster is writable before failover: OK
17:35:16> Killing node #2: OK
17:35:17> Wait failover by #7 with old epoch 3: OK
17:35:20> Cluster should eventually be up again: OK
17:35:21> Cluster is writable again: OK
17:35:21> Restarting node #2: OK
17:35:21> Instance #2 is now a slave: OK
17:35:21> We can read back the value we set before: OK
--- Iteration 13 ---
17:35:21> Cluster is writable before failover: OK
17:35:21> Killing node #9: OK
17:35:22> Cluster should eventually be up again: OK
17:35:22> Cluster is writable again: OK
17:35:22> Restarting node #9: OK
17:35:22> Instance #9 is now a slave: OK
17:35:22> We can read back the value we set before: OK
--- Iteration 12 ---
17:35:22> Cluster is writable before failover: OK
17:35:22> Killing node #5: OK
17:35:23> Cluster should eventually be up again: OK
17:35:23> Cluster is writable again: OK
17:35:23> Restarting node #5: OK
17:35:23> Instance #5 is now a slave: OK
17:35:23> We can read back the value we set before: OK
--- Iteration 11 ---
17:35:23> Cluster is writable before failover: OK
17:35:23> Killing node #8: OK
17:35:24> Cluster should eventually be up again: OK
17:35:24> Cluster is writable again: OK
17:35:24> Restarting node #8: OK
17:35:24> Instance #8 is now a slave: OK
17:35:24> We can read back the value we set before: OK
--- Iteration 10 ---
17:35:24> Cluster is writable before failover: OK
17:35:24> Killing node #8: OK
17:35:25> Cluster should eventually be up again: OK
17:35:25> Cluster is writable again: OK
17:35:25> Restarting node #8: OK
17:35:25> Instance #8 is now a slave: OK
17:35:25> We can read back the value we set before: OK
--- Iteration 9 ---
17:35:25> Cluster is writable before failover: OK
17:35:25> Killing node #6: OK
17:35:26> Cluster should eventually be up again: OK
17:35:26> Cluster is writable again: OK
17:35:26> Restarting node #6: OK
17:35:26> Instance #6 is now a slave: OK
17:35:26> We can read back the value we set before: OK
--- Iteration 8 ---
17:35:26> Cluster is writable before failover: OK
17:35:26> Killing node #9: OK
17:35:28> Cluster should eventually be up again: OK
17:35:28> Cluster is writable again: OK
17:35:28> Restarting node #9: OK
17:35:28> Instance #9 is now a slave: OK
17:35:28> We can read back the value we set before: OK
--- Iteration 7 ---
17:35:28> Cluster is writable before failover: OK
17:35:28> Killing node #8: OK
17:35:29> Cluster should eventually be up again: OK
17:35:29> Cluster is writable again: OK
17:35:29> Restarting node #8: OK
17:35:29> Instance #8 is now a slave: OK
17:35:29> We can read back the value we set before: OK
--- Iteration 6 ---
17:35:29> Cluster is writable before failover: OK
17:35:29> Killing node #8: OK
17:35:30> Cluster should eventually be up again: OK
17:35:30> Cluster is writable again: OK
17:35:30> Restarting node #8: OK
17:35:30> Instance #8 is now a slave: OK
17:35:30> We can read back the value we set before: OK
--- Iteration 5 ---
17:35:30> Wait for slave of #4 to sync: OK
17:35:30> Cluster is writable before failover: OK
17:35:30> Killing node #4: OK
17:35:31> Wait failover by #9 with old epoch 5: OK
17:35:34> Cluster should eventually be up again: OK
17:35:34> Cluster is writable again: OK
17:35:34> Restarting node #4: OK
17:35:34> Instance #4 is now a slave: OK
17:35:34> We can read back the value we set before: OK
--- Iteration 4 ---
17:35:35> Wait for slave of #9 to sync: OK
17:35:35> Cluster is writable before failover: OK
17:35:35> Killing node #9: OK
17:35:36> Wait failover by #4 with old epoch 24: OK
17:35:40> Cluster should eventually be up again: OK
17:35:40> Cluster is writable again: OK
17:35:40> Restarting node #9: OK
17:35:40> Instance #9 is now a slave: OK
17:35:40> We can read back the value we set before: OK
--- Iteration 3 ---
17:35:40> Cluster is writable before failover: OK
17:35:40> Killing node #6: OK
17:35:41> Cluster should eventually be up again: OK
17:35:41> Cluster is writable again: OK
17:35:41> Restarting node #6: OK
17:35:41> Instance #6 is now a slave: OK
17:35:41> We can read back the value we set before: OK
--- Iteration 2 ---
17:35:41> Cluster is writable before failover: OK
17:35:41> Killing node #5: OK
17:35:42> Cluster should eventually be up again: OK
17:35:42> Cluster is writable again: OK
17:35:42> Restarting node #5: OK
17:35:42> Instance #5 is now a slave: OK
17:35:42> We can read back the value we set before: OK
--- Iteration 1 ---
17:35:42> Cluster is writable before failover: OK
17:35:42> Killing node #5: OK
17:35:43> Cluster should eventually be up again: OK
17:35:43> Cluster is writable again: OK
17:35:43> Restarting node #5: OK
17:35:44> Instance #5 is now a slave: OK
17:35:44> We can read back the value we set before: OK
17:35:44> Post condition: current_epoch >= my_epoch everywhere: OK
Testing unit: 04-resharding.tcl
17:35:44> (init) Restart killed instances: OK
17:35:44> Cluster nodes are reachable: OK
17:35:44> Cluster nodes hard reset: OK
17:35:45> Cluster Join and auto-discovery test: OK
17:35:49> Before slots allocation, all nodes report cluster failure: OK
17:35:49> Create a 5 nodes cluster: OK
17:35:53> Cluster is up: OK
17:35:53> Cluster consistency during live resharding: WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW...Starting reshardingtarting resharding
17:36:26> Verify 50000 keys for consistency with logical content: OK
Testing unit: 05-slave-selection.tcl
17:36:31> (init) Restart killed instances: OK
17:36:31> Cluster nodes are reachable: OK
17:36:31> Cluster nodes hard reset: OK
17:36:33> Cluster Join and auto-discovery test: OK
17:36:37> Before slots allocation, all nodes report cluster failure: OK
17:36:37> Create a 5 nodes cluster: OK
17:36:41> Cluster is up: OK
17:36:41> The first master has actually two slaves: OK
17:36:41> Slaves of #0 are instance #5 and #10 as expected: OK
17:36:41> Instance #5 and #10 synced with the master: OK
17:36:42> Slaves are both able to receive and acknowledge writes: OK
17:36:42> Write data while slave #10 is paused and can't receive it: OK
17:36:53> Wait for instance #5 (and not #10) to turn into a master: OK
17:36:56> Wait for the node #10 to return alive before ending the test: OK
17:36:56> Cluster should eventually be up again: OK
17:36:57> Node #10 should eventually replicate node #5: OK
Testing unit: 06-slave-stop-cond.tcl
17:36:57> (init) Restart killed instances: redis/0 OK
17:36:57> Cluster nodes are reachable: OK
17:36:58> Cluster nodes hard reset: OK
17:36:59> Cluster Join and auto-discovery test: OK
17:37:03> Before slots allocation, all nodes report cluster failure: OK
17:37:03> Create a 5 nodes cluster: OK
17:37:07> Cluster is up: OK
17:37:07> The first master has actually one slave: OK
17:37:07> Slaves of #0 is instance #5 as expected: OK
17:37:07> Instance #5 synced with the master: OK
17:37:07> Lower the slave validity factor of #5 to the value of 2: OK
17:37:07> Break master-slave link and prevent further reconnections: OK
17:37:28> Slave #5 is reachable and alive: OK
17:37:28> Slave #5 should not be able to failover: OK
17:37:38> Cluster should be down: OK
Testing unit: 07-replica-migration.tcl
17:37:38> (init) Restart killed instances: redis/0 OK
17:37:38> Cluster nodes are reachable: OK
17:37:38> Cluster nodes hard reset: OK
17:37:40> Cluster Join and auto-discovery test: OK
17:37:44> Before slots allocation, all nodes report cluster failure: OK
17:37:44> Create a 5 nodes cluster: OK
17:37:49> Cluster is up: OK
17:37:49> Each master should have two replicas attached: OK
17:37:49> Killing all the slaves of master #0 and #1: OK
17:37:57> Master #0 should have at least one replica: OK
17:37:57> Master #1 should have at least one replica: OK
17:37:57> Master #2 should have at least one replica: OK
17:37:57> Master #3 should have at least one replica: OK
17:37:57> Master #4 should have at least one replica: OK
Testing unit: 08-update-msg.tcl
17:37:57> (init) Restart killed instances: redis/5 redis/6 redis/10 redis/11 OK
17:37:57> Cluster nodes are reachable: OK
17:37:57> Cluster nodes hard reset: OK
17:37:59> Cluster Join and auto-discovery test: OK
17:38:04> Before slots allocation, all nodes report cluster failure: OK
17:38:04> Create a 5 nodes cluster: OK
17:38:08> Cluster is up: OK
17:38:08> Cluster is writable: OK
17:38:08> Instance #5 is a slave: OK
17:38:08> Instance #5 synced with the master: OK
17:38:08> Killing one master node: OK
17:38:09> Wait for failover: OK
17:38:12> Cluster should eventually be up again: OK
17:38:12> Cluster is writable: OK
17:38:12> Instance #5 is now a master: OK
17:38:12> Killing the new master #5: OK
17:38:13> Cluster should be down now: OK
17:38:16> Restarting the old master node: OK
17:38:16> Instance #0 gets converted into a slave: OK
17:38:16> Restarting the new master node: OK
17:38:16> Cluster is up again: OK
Testing unit: 09-pubsub.tcl
17:38:22> (init) Restart killed instances: OK
17:38:22> Cluster nodes are reachable: OK
17:38:22> Cluster nodes hard reset: OK
17:38:25> Cluster Join and auto-discovery test: OK
17:38:28> Before slots allocation, all nodes report cluster failure: OK
17:38:29> Create a 5 nodes cluster: OK
17:38:32> Test publishing to master: OK
17:38:32> Test publishing to slave: OK
Testing unit: 10-manual-failover.tcl
17:38:32> (init) Restart killed instances: OK
17:38:32> Cluster nodes are reachable: OK
17:38:32> Cluster nodes hard reset: OK
17:38:34> Cluster Join and auto-discovery test: OK
17:38:38> Before slots allocation, all nodes report cluster failure: OK
17:38:39> Create a 5 nodes cluster: OK
17:38:43> Cluster is up: OK
17:38:43> Cluster is writable: OK
17:38:43> Instance #5 is a slave: OK
17:38:43> Instance #5 synced with the master: OK
17:38:43> Send CLUSTER FAILOVER to #5, during load: WWWWWWWWWWOK
17:38:45> Wait for failover: OK
17:38:45> Cluster should eventually be up again: OK
17:38:45> Cluster is writable: OK
17:38:45> Instance #5 is now a master: OK
17:38:45> Verify 50000 keys for consistency with logical content: OK
17:38:46> Instance #0 gets converted into a slave: OK
17:38:46> (init) Restart killed instances: OK
17:38:46> Cluster nodes are reachable: OK
17:38:46> Cluster nodes hard reset: OK
17:38:48> Cluster Join and auto-discovery test: OK
17:38:52> Before slots allocation, all nodes report cluster failure: OK
17:38:52> Create a 5 nodes cluster: OK
17:38:56> Cluster is up: OK
17:38:56> Cluster is writable: OK
17:38:56> Instance #5 is a slave: OK
17:38:56> Instance #5 synced with the master: OK
17:38:56> Make instance #0 unreachable without killing it: OK
17:38:56> Send CLUSTER FAILOVER to instance #5: OK
17:38:56> Instance #5 is still a slave after some time (no failover): OK
17:39:01> Wait for instance #0 to return back alive: OK
17:39:06> (init) Restart killed instances: OK
17:39:06> Cluster nodes are reachable: OK
17:39:06> Cluster nodes hard reset: OK
17:39:08> Cluster Join and auto-discovery test: OK
17:39:13> Before slots allocation, all nodes report cluster failure: OK
17:39:13> Create a 5 nodes cluster: OK
17:39:17> Cluster is up: OK
17:39:17> Cluster is writable: OK
17:39:17> Instance #5 is a slave: OK
17:39:17> Instance #5 synced with the master: OK
17:39:17> Make instance #0 unreachable without killing it: OK
17:39:17> Send CLUSTER FAILOVER to instance #5: OK
17:39:17> Instance #5 is a master after some time: OK
17:39:18> Wait for instance #0 to return back alive: OK
Testing unit: 11-manual-takeover.tcl
17:39:27> (init) Restart killed instances: OK
17:39:27> Cluster nodes are reachable: OK
17:39:28> Cluster nodes hard reset: OK
17:39:30> Cluster Join and auto-discovery test: OK
17:39:33> Before slots allocation, all nodes report cluster failure: OK
17:39:34> Create a 5 nodes cluster: OK
17:39:37> Cluster is up: OK
17:39:37> Cluster is writable: OK
17:39:37> Killing majority of master nodes: OK
17:39:40> Cluster should eventually be down: OK
17:39:41> Use takeover to bring slaves back: OK
17:39:41> Cluster should eventually be up again: OK
17:39:42> Cluster is writable: OK
17:39:42> Instance #5, #6, #7 are now masters: OK
17:39:42> Restarting the previously killed master nodes: OK
17:39:42> Instance #0, #1, #2 gets converted into a slaves: OK
Cleaning up...
GOOD! No errors.

Collection and Platform Info
----------------------------
Parameter                 r016ah                                                                                                        
------------------------  --------------------------------------------------------------------------------------------------------------
Application Command Line  /home/ziyang/Pmem/redis-3.0.1/runtest-cluster                                                                 
Operating System          3.11.0 DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=12.04
DISTRIB_CODENAME=precise
DISTRIB_DESCRIPTION="Ubuntu 12.04 LTS"
Computer Name             ziyang-OptiPlex-7020                                                                                          
Result Size               1378788972                                                                                                    
Collection start time     00:34:04 22/05/2015 UTC                                                                                       
Collection stop time      00:39:44 22/05/2015 UTC                                                                                       

CPU
---
Parameter          r016ah                                           
-----------------  -------------------------------------------------
Name               4th generation Intel(R) Core(TM) Processor family
Frequency          3292358999                                       
Logical CPU Count  4                                                

Summary
-------
Elapsed Time:       340.021
CPU Time:           99.297 
Average CPU Usage:  0.159  
CPI Rate:           0.695  

Event summary
-------------
Hardware Event Type         Hardware Event Count:Self  Hardware Event Sample Count:Self  Events Per Sample
--------------------------  -------------------------  --------------------------------  -----------------
INST_RETIRED.ANY                         375922782424                            153814  3300000          
CPU_CLK_UNHALTED.THREAD                  261196258479                            132384  3300000          
CPU_CLK_UNHALTED.REF_TSC                 326920721028                             87016  3300000          
BR_INST_RETIRED.NEAR_TAKEN                39560403973                            152930  200003           
ITERATION_COUNT                           10000218012                            957846  1                
LOOP_ENTRY_COUNT                           3175417079                            659487  1                
CALL_COUNT                                 5743627590                           2800509  1                
